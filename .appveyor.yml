build: false
platform:
  - x64
clone_folder: C:\projects\database
branches:
  except:
    - gh-pages

cache:
  - C:\ProgramData\chocolatey\bin -> .appveyor.yml
  - C:\ProgramData\chocolatey\lib -> .appveyor.yml
  - C:\tools\php -> .appveyor.yml
  - C:\tools\cacert -> .appveyor.yml
  - C:\tools\composer -> .appveyor.yml
  - '%LOCALAPPDATA%\Composer\files -> composer.json'

## Build matrix for lowest and highest possible targets
environment:
  matrix:
  - db: mssql
    driver: sqlsrv
    db_version: sql2012sp1
    php: 7.0
    coverage: yes
  - db: mssql
    driver: sqlsrv
    db_version: sql2014
    coverage: no
    php: 7.1
  - db: mssql
    driver: sqlsrv
    db_version: sql2017
    php: 7.2

init:
  - SET PATH=C:\Program Files\OpenSSL;c:\tools\php;C:\tools\composer;%PATH%
  - SET COMPOSER_NO_INTERACTION=1
  - SET ANSICON=121x90 (121x90)

init:
  - SET PATH=C:\Program Files\OpenSSL;c:\tools\php;%PATH%
  - SET COMPOSER_NO_INTERACTION=1
  - SET PHP=1 # this var relates to caching the php  install
  - SET ANSICON=121x90 (121x90)
services:
  - mssql2014
  - mysql
  - postgresql94
  - iis

## Install PHP and composer, and run the appropriate composer command
install:
    - ps: |
        # Check if installation is cached
        if (!(Test-Path c:\tools\php)) {
          appveyor-retry cinst --params '""/InstallDir:C:\tools\php""' --ignore-checksums -y php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php | sort { [version]($_ -split '\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')
          # install sqlite
          appveyor-retry cinst -y sqlite
          Get-ChildItem -Path c:\tools\php
          cd c:\tools\php

          # Set PHP environment items that are always needed
          copy php.ini-production php.ini
          Add-Content php.ini "`n date.timezone=UTC"
          Add-Content php.ini "`n extension_dir=ext"
          Add-Content php.ini "`n memory_limit=1G"
          Add-Content php.ini "`n extension=php_openssl.dll"
          Add-Content php.ini "`n extension=php_mbstring.dll"
          Add-Content php.ini "`n extension=php_fileinfo.dll"
          Add-Content php.ini "`n extension=php_pdo_sqlite.dll"
          Add-Content php.ini "`n extension=php_sqlite3.dll"
          Add-Content php.ini "`n extension=php_curl.dll"
          Add-Content php.ini "`n curl.cainfo=C:\tools\cacert\bundle.pem"

          # Get and install the MSSQL DLL's
          $DLLVersion = "5.2.0"
          cd c:\tools\php\ext
          $source = "https://windows.php.net/downloads/pecl/releases/sqlsrv/$($DLLVersion)/php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip"
          $destination = "c:\tools\php\ext\php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip"
          Invoke-WebRequest $source -OutFile $destination
          7z x -y php_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip > $null
          $source = "https://windows.php.net/downloads/pecl/releases/pdo_sqlsrv/$($DLLVersion)/php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip"
          $destination = "c:\tools\php\ext\php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip"
          Invoke-WebRequest $source -OutFile $destination
          7z x -y php_pdo_sqlsrv-$($DLLVersion)-$($env:php)-nts-vc15-x64.zip > $null
          Remove-Item c:\tools\php\* -include .zip
          cd c:\tools\php
          Add-Content php.ini "`nextension=php_sqlsrv.dll"
          Add-Content php.ini "`nextension=php_pdo_sqlsrv.dll"
          Add-Content php.ini "`n"

          # download Composer
          if (!(Test-Path C:\tools\composer)) {
            New-Item -path c:\tools -name composer -itemtype directory
          }
          if (!(Test-Path c:\tools\composer\composer.phar)) {
            appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar -Filename C:\tools\composer\composer.phar
            Set-Content -path 'C:\tools\composer\composer.bat' -Value ('@php C:\tools\composer\composer.phar %*')
          }

          # download CA bundle
          if (!(Test-Path C:\tools\cacert)) {
            New-Item -path c:\tools\ -name cacert -itemtype directory
          }
          if (!(Test-Path c:\tools\cacert\bundle.pem)) {
            appveyor-retry appveyor DownloadFile https://curl.haxx.se/ca/cacert.pem -Filename C:\tools\cacert\bundle.pem
          }
        }
    # install composer dependencies
    - cd C:\projects\database
    - rm composer.lock
    - appveyor-retry composer self-update
    - appveyor-retry composer install --no-progress --prefer-dist

before_test:
# Selectively start the services
  - ps: >-
      if ($env:db -eq "mssql") {
        $env:instance_name = $env:db_version.ToUpper()
        $env:sql_instance = "(local)\$($env:instance_name)"
        net start "MSSQL`$($env:instance_name)"
        sqlcmd -b -E -S "$($env:sql_instance)" -Q "CREATE DATABASE joomla_ut"
        sqlcmd -S "$($env:sql_instance)" -U "sa" -P "Password12!" -i $($env:APPVEYOR_BUILD_FOLDER)\Tests\Stubs\sqlsrv.sql
      }

test_script:
  - cd C:\projects\database
  - vendor/bin/phpunit -c phpunit.appveyor.xml
